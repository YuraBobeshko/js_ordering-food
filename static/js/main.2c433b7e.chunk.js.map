{"version":3,"sources":["App.js","serviceWorker.js","redux/rootReducer.js","index.js"],"names":["App","this","props","food","onSelect","onDown","onUp","className","map","item","selected","key","id","name","toString","hidden","onChange","type","value","disabled","onClick","React","Component","ItemUp","ItemDown","Select","unSelected","connect","state","dispath","payload","number","Boolean","window","location","hostname","match","initialState","position","rootReducer","action","upItems","infoForButton","forEach","index","splice","downItems","store","createStore","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2c433b7e.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from \"react-redux\";\nimport './App.css';\n\nclass App extends React.Component {\n  render() {\n    const {food, onSelect, onDown, onUp} = this.props;\n    return (\n      <div className=\"App\">\n        {food.map(item => {\n          return (\n            <label\n              className={`list-group-item ${item.selected ? \"active\" : \"\"}`}\n              key={item.id}\n            >\n              {item.name} || {item.id} || {item.selected.toString()}\n              <input\n                hidden={true}\n                onChange={() => onSelect(item.id)}\n                type=\"checkbox\"\n                value={item.selected}\n              ></input>\n            </label>\n          );\n        })}\n        <button\n          className=\"btn btn-primary\"\n          disabled={food[0].selected}\n          onClick={onUp}\n        >\n          onUp\n        </button>\n        <button\n          className=\"btn btn-primary\"\n          disabled={food[9].selected}\n          onClick={onDown}\n        >\n          onDown\n        </button>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    food: state.food\n  }\n}\n\nconst ItemUp = \"MOVE_ITEM_UP\";\nconst ItemDown = \"MOVE_ITEM_DOWN\";\nconst Select = \"SELECT\"\nconst unSelected = \"UNSELECTED\"\n\nfunction mapDispathToProps(dispath) {\n  return {\n    onUp: id => dispath({type: ItemUp, payload: id}),\n    onDown: id => dispath({type: ItemDown, payload: id}),\n    onSelect: number => dispath({type: Select, payload: number}),\n    unSelected: () => dispath({type: unSelected}),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispathToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\nconst ItemUp = \"MOVE_ITEM_UP\";\r\nconst ItemDown = \"MOVE_ITEM_DOWN\";\r\nconst Select = \"SELECT\";\r\nconst unSelected = \"UNSELECTED\"\r\n\r\nconst initialState = { food: [\r\n  { name: \"Apple\", id: 0, position: 0, selected: false, },\r\n  { name: \"Bread\", id: 1, position: 1, selected: false, },\r\n  { name: \"Carrot\", id: 2, position: 2, selected: false, },\r\n  { name: \"Dumplings\", id: 3, position: 3, selected: false, },\r\n  { name: \"Eggs\", id: 4, position: 4, selected: false, },\r\n  { name: \"Fish\", id: 5, position: 5, selected: false, },\r\n  { name: \"Garlic\", id: 6, position: 6, selected: false, },\r\n  { name: \"Honey\", id: 7, position: 7, selected: false, },\r\n  { name: \"Ice cream\", id: 8, position: 8, selected: false, },\r\n  { name: \"Jam\", id: 9, position: 9, selected: false, },\r\n], };\r\n\r\nfunction rootReducer (state = initialState, action) {\r\n    switch (action.type) {\r\n\r\n    case ItemUp:\r\n      const upItems = [...state.food];\r\n      const infoForButton = {...state.infoForButton};\r\n      state.food.forEach( (item, index) => {\r\n        if(item.selected && index !== 0) {\r\n          upItems[index-1] = upItems.splice(index, 1, upItems[index-1])[0];\r\n        }\r\n      });\r\n      return {\r\n        food: [...upItems],\r\n        infoForButton: {...infoForButton}, \r\n      };\r\n\r\n    case ItemDown:\r\n      const downItems = [...state.food];\r\n      for (let index = 9; index >= 0; index--) {\r\n        let item = state.food[index];\r\n        if (item.selected && index !== 9) {\r\n          downItems[index+1] = downItems.splice(index, 1, downItems[index+1])[0];\r\n        }\r\n      };\r\n      return {\r\n        food: [...downItems],\r\n      };\r\n\r\n    case Select:\r\n      return {\r\n        food: [...state.food].map( item => {\r\n          if(item.id === action.payload) {\r\n            item.selected = !item.selected;\r\n          }\r\n          return item;\r\n        } )\r\n      };\r\n\r\n    case unSelected:\r\n      return {\r\n        food: [...state.food].map( item => {\r\n          return {...item, selected: false};\r\n        } )\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\"\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from \"redux\"\nimport rootReducer from \"./redux/rootReducer\"\nimport { Provider } from \"react-redux\"\n\nconst store = createStore(rootReducer);\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}